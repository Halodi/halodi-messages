#include <std_msgs/msg/Header.idl>
#include <halodi_msgs/msg/JointStatus.idl>
#include <halodi_msgs/msg/MotorStatus.idl>
#include <halodi_msgs/msg/BatteryStatus.idl>
#include <halodi_msgs/msg/ControlInputState.idl>


module halodi_msgs {
    module msg {
    
        /**
          * Status of a robot
          *
          * This message is a custom type instead of DiagnosticsArray, due to the overhead of String based values inside the controller
          *
          */
        @TypeCode(type="halodi_msgs::msg::dds_::RobotStatus_")
        struct RobotStatus
        {
        
            /**
             * Standard ROS header
             */
             std_msgs::msg::Header header;
        
            
            /**
             * Current status level of the robot
             *
             * As described in diagnostic_msgs/DiagnosticStatus
             *
             */
            octet robot_status_level;
            
            
            /**
              * State of the control input module of the controller
              *
              * If this is not ACCEPTING_COMMANDS, commands from the API will get ignored. 
              * 
              * Note: This is the same as control_input_state in whole_body_state and is here for convenience
              */
            halodi_msgs:msg:ControlInputState control_input_state;
            
            
            /**
             *
             * Status of the battery
             *
             */
            halodi_msgs::msg::BatteryStatus battery_status;
            
            
            /**
             *
             * State of the estop on the backpack of the robot. 
             * 
             * If true, power can be applied to the motors
             *
             */
            boolean backpack_estop_enabled;
            
            /**
             *
             * State of the wireless estop
             * 
             * If true, power can be applied to the motors
             *
             */
             boolean wireless_estop_enabled;
            
            
            /**
             * True if one of the motors in the robot is overheating.
             * 
             * This data can be read from the individual motors, but is available as an easy check here.
             *
             */
            boolean over_temperature;
            
            
            /**
             * True if due a fault, the wheels are disabled but the robot is still able to balance
             *
             */
            boolean driving_disabled;
            
            /**
             * Status of the joints on the robot
             *
             */
            sequence<halodi_msgs::msg::JointStatus, 30> joint_status;
            
            /**
             * Status of the motors on the robot
             * 
             * Note that motors are shared by multiple joints due to the differential drives, hence the split between motor and joint.
             *
             */
            sequence<halodi_msgs::msg::MotorStatus, 30> motor_status;
            
            
            /**
             * The time the robot has been running since the controller was started.
             *
             * Unit: seconds
             *
             */
            unsigned long runtime_since_start;
            
            /**
             * The time the robot has been running in total
             *
             * Unit: seconds
             *
             */
            unsigned long total_runtime;
             
             
             /**
              * The nubmer of times the controller has been started.
              *
              */
             unsigned long numberOfRuns;
            
            
        };
        
    };
};
 
