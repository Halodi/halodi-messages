buildscript {
   repositories {
      mavenCentral()
      maven { url "https://plugins.gradle.org/m2/" }
      maven { url "https://artifacts.halodi.com/repository/maven-open-source-group" }
      mavenLocal()
   }
   
   dependencies {
      classpath "us.ihmc:ihmc-commons:0.30.4"
      classpath "us.ihmc:log-tools:0.6.1"
      classpath "us.ihmc:ihmc-pub-sub-generator:0.15.0"
      classpath 'com.halodi:halodi-csharp-pub-sub-generator:0.1.2'
   }
   

}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'


group = "halodi.controls"
def inputVersion = project.hasProperty("artifactVersion") ? 
                project.getProperty("artifactVersion"): System.getenv('ARTIFACT_VERSION')
version = inputVersion ? inputVersion: "0.0.0-SNAPSHOT"
def baseRepoUrl = System.getenv('CI_API_V4_URL')
def projectId = System.getenv('CI_PROJECT_ID')
def repoUrl = "${baseRepoUrl}/projects/${projectId}/packages/maven"

def outputDirectory = project.file("$buildDir/java-generated")
def csOutputDirectory = project.file("${project.projectDir}/halodi-messages-unity-support/Packages/halodi-messages/Runtime")

repositories {
    mavenCentral()
    maven { url "https://artifacts.halodi.com/repository/maven-open-source-group" }
    mavenLocal()
}


sourceSets {
    main {
        java {
            srcDirs = [ outputDirectory ]
        }
    }
}



dependencies
{
    compile group: "us.ihmc", name: "euclid-geometry", version: "0.16.2"
    compile group: "us.ihmc", name: "ihmc-pub-sub", version: "0.15.0"
    compile group: "us.ihmc", name: "ros2-common-interfaces", version: "0.19.4"
}


task generateHalodiMessages(type: us.ihmc.idl.generator.IDLGeneratorTask) {
    idlFiles = fileTree(dir: "halodi_msgs/msg/")
    idlFiles += fileTree(dir: "ocs2_ros2_msgs/msg/")
    includeDirs = files(".", "java-typesupport")
    targetDirectory = outputDirectory
    packagePrefix = ""
    
    doFirst
    {
        mkdir outputDirectory
    }

    doLast 
    {
        // Due to incompatiblity with how the java messages are generated and how the new .idl support is defined, we need to add ".dds" to the package name for all included files.
    
        def typesupportDirectories = file("java-typesupport")
        def generated = fileTree(dir: outputDirectory)
        typesupportDirectories.eachFile(groovy.io.FileType.DIRECTORIES) { 
            def packageName = it.name
            generated.each
            {
                def msgAdjusted = it.text.replaceAll(packageName + "\\." + "msg",  packageName + "\\." + "msg.dds")
                def srvAdjusted = msgAdjusted.replaceAll(packageName + "\\." + "srv",  packageName + "\\." + "srv.dds")
                it.text = srvAdjusted
            } 
            
        }
    }
    
}

task importRos2IDL(type: DefaultTask) {
    doLast
    {
    
        def typesupportDirectories = fileTree(dir: "java-typesupport", include: "**/*.idl")
       
       def generated = fileTree(dir: outputDirectory)
        
        typesupportDirectories.each { 
            def newPath = it.absolutePath.replaceAll("_\\.idl\$", ".idl")
            
            def includeAdjusted = it.text.replaceAll(/#include "(.*)_\.idl"/, /#include "$1\.idl"/)
            
            def ddsAdjusted = includeAdjusted.replaceAll(/(?s)module dds(.*?)\{(.*)\};/, /$2/)
            
            def ddsRemoved = ddsAdjusted.replaceAll(/::dds::/, '::')
            
            it.text = ddsRemoved
            
            
            println "Moving " + it.name + " to " + newPath
            it.renameTo(newPath)
        }
    }
}


task generateCSharpMessages(type: com.halodi.idl.generator.IDLCSharpGeneratorTask) {
    idlFiles = fileTree(dir: "halodi_msgs/msg/")
    idlFiles += fileTree(dir: "ocs2_ros2_msgs/msg/")
    idlFiles += fileTree(dir: "java-typesupport/", include: '**/*.idl')
    includeDirs = files(".", "java-typesupport")
    targetDirectory = csOutputDirectory

    packagePrefix = ""
    
    doFirst
    {
        mkdir csOutputDirectory
    }
    
    doLast
    {
                def typesupportDirectories = file(csOutputDirectory)
        def generated = fileTree(dir: outputDirectory)
        
        def constantDirectories = []
        typesupportDirectories.eachFileRecurse(groovy.io.FileType.DIRECTORIES) { 
        
            if(it.name.endsWith("_Constants"))
            {
                constantDirectories.add(it)
            }
        }
        
        constantDirectories.each() {
            it.deleteDir()
        }

    }
    
    
}


build.dependsOn generateHalodiMessages
jar.dependsOn generateHalodiMessages

build.dependsOn generateCSharpMessages
jar.dependsOn generateCSharpMessages



task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}


// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            name "Jesper Smith"
            email "jesper@halodi.com"
        }
    }
    
    scm {
       url "https://github.com/yourgithubaccount/example"
    }
}

// Create the publication with the pom configuration:
publishing {
    publications {
        HalodiMessages(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId group
            artifactId project.name
            version version
        }
    }
    repositories {
        maven {
            credentials(HttpHeaderCredentials) {
            name = 'Job-Token'
            value = System.getenv("CI_JOB_TOKEN")
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
            url "$repoUrl"
        }
    }
}
